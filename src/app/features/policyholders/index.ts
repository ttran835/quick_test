import {
  createAsyncThunk,
  createEntityAdapter,
  createSlice,
} from '@reduxjs/toolkit';
import axios from 'axios';

import { SURE_API } from '../../../constants/apiLinks';
import { Policyholder } from './interfaces';

const initialState: { status: 'idle' | 'loading' | 'failed' } = {
  status: 'idle',
};

/**
 * Uitlized name and phonenumber since object in response
 * data does not provide uniqueId
 * In real production, we would use UUID or another uniqueId instead
 */
export const policyholdersAdapter = createEntityAdapter<Policyholder>({
  selectId: (policyholder) => {
    const { name, phoneNumber } = policyholder;
    const uniqueId = `${name}-${phoneNumber}`;
    return uniqueId;
  },
});

export const getPolicyholders = createAsyncThunk(
  'policyholders/getPolicyholders',
  async () => {
    const response = await axios.get(`${SURE_API}/policyholders`);
    return response.data.policyHolders;
  }
);

export const createPolicyholder = createAsyncThunk(
  'policyholders/createPolicyholder',
  async (payload: Policyholder) => {
    const response = await axios.post(
      `${SURE_API}/policyholders`,
      payload
    );

    return response.data.policyHolders;
  }
);

export const policyholdersSlice = createSlice({
  name: 'policyholders',
  initialState: policyholdersAdapter.getInitialState(initialState),
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // GET
    builder.addCase(getPolicyholders.pending, (state) => {
      state.status = 'loading';
    });
    builder.addCase(getPolicyholders.fulfilled, (state, action) => {
      state.status = 'idle';

      if (action.payload) {
        policyholdersAdapter.setAll(state, action.payload);
      }
    });

    // POST
    builder.addCase(createPolicyholder.pending, (state) => {
      state.status = 'loading';
    });
    builder.addCase(createPolicyholder.fulfilled, (state, action) => {
      state.status = 'idle';

      /**
       * This is not ideal since in prod
       * Implemented this way since we know that index 1
       * will always be the newly added policyholder
       */
      if (action.payload) {
        policyholdersAdapter.upsertOne(state, action.payload[1]);
      }
    });
  },
});

export default policyholdersSlice.reducer;
